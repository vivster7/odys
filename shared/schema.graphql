type Comment implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  comment: String!
  createdAt: Datetime
  updatedAt: Datetime
  userId: Int
  userName: String!
  postId: Int
}

"""
A condition to be used against `Comment` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input CommentCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""An input for mutations affecting `Comment`"""
input CommentInput {
  rowId: Int
  comment: String!
  createdAt: Datetime
  updatedAt: Datetime
  userId: Int
  userName: String!
  postId: Int
}

"""
Represents an update to a `Comment`. Fields that are set will be updated.
"""
input CommentPatch {
  rowId: Int
  comment: String
  createdAt: Datetime
  updatedAt: Datetime
  userId: Int
  userName: String
  postId: Int
}

"""A connection to a list of `Comment` values."""
type CommentsConnection {
  """A list of `Comment` objects."""
  nodes: [Comment!]!

  """
  A list of edges which contains the `Comment` and cursor to aid in pagination.
  """
  edges: [CommentsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Comment` you could get from the connection."""
  totalCount: Int!
}

"""A `Comment` edge in the connection."""
type CommentsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Comment` at the end of the edge."""
  node: Comment!
}

"""Methods to use when ordering `Comment`."""
enum CommentsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""All input for the create `Comment` mutation."""
input CreateCommentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Comment` to be created by this mutation."""
  comment: CommentInput!
}

"""The output of our create `Comment` mutation."""
type CreateCommentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Comment` that was created by this mutation."""
  comment: Comment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Comment`. May be used by Relay 1."""
  commentEdge(
    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CommentsEdge
}

"""All input for the create `KnexMigration` mutation."""
input CreateKnexMigrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `KnexMigration` to be created by this mutation."""
  knexMigration: KnexMigrationInput!
}

"""The output of our create `KnexMigration` mutation."""
type CreateKnexMigrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `KnexMigration` that was created by this mutation."""
  knexMigration: KnexMigration

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `KnexMigration`. May be used by Relay 1."""
  knexMigrationEdge(
    """The method to use when ordering `KnexMigration`."""
    orderBy: [KnexMigrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): KnexMigrationsEdge
}

"""All input for the create `KnexMigrationsLock` mutation."""
input CreateKnexMigrationsLockInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `KnexMigrationsLock` to be created by this mutation."""
  knexMigrationsLock: KnexMigrationsLockInput!
}

"""The output of our create `KnexMigrationsLock` mutation."""
type CreateKnexMigrationsLockPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `KnexMigrationsLock` that was created by this mutation."""
  knexMigrationsLock: KnexMigrationsLock

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `KnexMigrationsLock`. May be used by Relay 1."""
  knexMigrationsLockEdge(
    """The method to use when ordering `KnexMigrationsLock`."""
    orderBy: [KnexMigrationsLocksOrderBy!] = [PRIMARY_KEY_ASC]
  ): KnexMigrationsLocksEdge
}

"""All input for the create `MouseCoordinate` mutation."""
input CreateMouseCoordinateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `MouseCoordinate` to be created by this mutation."""
  mouseCoordinate: MouseCoordinateInput!
}

"""The output of our create `MouseCoordinate` mutation."""
type CreateMouseCoordinatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MouseCoordinate` that was created by this mutation."""
  mouseCoordinate: MouseCoordinate

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `MouseCoordinate`. May be used by Relay 1."""
  mouseCoordinateEdge(
    """The method to use when ordering `MouseCoordinate`."""
    orderBy: [MouseCoordinatesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MouseCoordinatesEdge
}

"""All input for the create `Post` mutation."""
input CreatePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `Post` to be created by this mutation."""
  post: PostInput!
}

"""The output of our create `Post` mutation."""
type CreatePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Post` that was created by this mutation."""
  post: Post

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge
}

"""All input for the create `User` mutation."""
input CreateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """The `User` to be created by this mutation."""
  user: UserInput!
}

"""The output of our create `User` mutation."""
type CreateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was created by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

"""A location in a connection that can be used for resuming pagination."""
scalar Cursor

"""
A point in time as described by the [ISO
8601](https://en.wikipedia.org/wiki/ISO_8601) standard. May or may not include a timezone.
"""
scalar Datetime

"""All input for the `deleteCommentById` mutation."""
input DeleteCommentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Comment` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteComment` mutation."""
input DeleteCommentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our delete `Comment` mutation."""
type DeleteCommentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Comment` that was deleted by this mutation."""
  comment: Comment
  deletedCommentId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Comment`. May be used by Relay 1."""
  commentEdge(
    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CommentsEdge
}

"""All input for the `deleteKnexMigrationById` mutation."""
input DeleteKnexMigrationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `KnexMigration` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteKnexMigration` mutation."""
input DeleteKnexMigrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our delete `KnexMigration` mutation."""
type DeleteKnexMigrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `KnexMigration` that was deleted by this mutation."""
  knexMigration: KnexMigration
  deletedKnexMigrationId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `KnexMigration`. May be used by Relay 1."""
  knexMigrationEdge(
    """The method to use when ordering `KnexMigration`."""
    orderBy: [KnexMigrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): KnexMigrationsEdge
}

"""All input for the `deleteKnexMigrationsLockById` mutation."""
input DeleteKnexMigrationsLockByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `KnexMigrationsLock` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteKnexMigrationsLock` mutation."""
input DeleteKnexMigrationsLockInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  index: Int!
}

"""The output of our delete `KnexMigrationsLock` mutation."""
type DeleteKnexMigrationsLockPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `KnexMigrationsLock` that was deleted by this mutation."""
  knexMigrationsLock: KnexMigrationsLock
  deletedKnexMigrationsLockId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `KnexMigrationsLock`. May be used by Relay 1."""
  knexMigrationsLockEdge(
    """The method to use when ordering `KnexMigrationsLock`."""
    orderBy: [KnexMigrationsLocksOrderBy!] = [PRIMARY_KEY_ASC]
  ): KnexMigrationsLocksEdge
}

"""All input for the `deleteMouseCoordinateById` mutation."""
input DeleteMouseCoordinateByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MouseCoordinate` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteMouseCoordinate` mutation."""
input DeleteMouseCoordinateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our delete `MouseCoordinate` mutation."""
type DeleteMouseCoordinatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MouseCoordinate` that was deleted by this mutation."""
  mouseCoordinate: MouseCoordinate
  deletedMouseCoordinateId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `MouseCoordinate`. May be used by Relay 1."""
  mouseCoordinateEdge(
    """The method to use when ordering `MouseCoordinate`."""
    orderBy: [MouseCoordinatesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MouseCoordinatesEdge
}

"""All input for the `deletePostById` mutation."""
input DeletePostByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Post` to be deleted.
  """
  id: ID!
}

"""All input for the `deletePost` mutation."""
input DeletePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our delete `Post` mutation."""
type DeletePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Post` that was deleted by this mutation."""
  post: Post
  deletedPostId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge
}

"""All input for the `deleteUserById` mutation."""
input DeleteUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be deleted.
  """
  id: ID!
}

"""All input for the `deleteUser` mutation."""
input DeleteUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String
  rowId: Int!
}

"""The output of our delete `User` mutation."""
type DeleteUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was deleted by this mutation."""
  user: User
  deletedUserId: ID

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

type KnexMigration implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  name: String
  batch: Int
  migrationTime: Datetime
}

"""
A condition to be used against `KnexMigration` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input KnexMigrationCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""An input for mutations affecting `KnexMigration`"""
input KnexMigrationInput {
  rowId: Int
  name: String
  batch: Int
  migrationTime: Datetime
}

"""
Represents an update to a `KnexMigration`. Fields that are set will be updated.
"""
input KnexMigrationPatch {
  rowId: Int
  name: String
  batch: Int
  migrationTime: Datetime
}

"""A connection to a list of `KnexMigration` values."""
type KnexMigrationsConnection {
  """A list of `KnexMigration` objects."""
  nodes: [KnexMigration!]!

  """
  A list of edges which contains the `KnexMigration` and cursor to aid in pagination.
  """
  edges: [KnexMigrationsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `KnexMigration` you could get from the connection."""
  totalCount: Int!
}

"""A `KnexMigration` edge in the connection."""
type KnexMigrationsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `KnexMigration` at the end of the edge."""
  node: KnexMigration!
}

type KnexMigrationsLock implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  index: Int!
  isLocked: Int
}

"""
A condition to be used against `KnexMigrationsLock` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input KnexMigrationsLockCondition {
  """Checks for equality with the object’s `index` field."""
  index: Int
}

"""An input for mutations affecting `KnexMigrationsLock`"""
input KnexMigrationsLockInput {
  index: Int
  isLocked: Int
}

"""
Represents an update to a `KnexMigrationsLock`. Fields that are set will be updated.
"""
input KnexMigrationsLockPatch {
  index: Int
  isLocked: Int
}

"""A connection to a list of `KnexMigrationsLock` values."""
type KnexMigrationsLocksConnection {
  """A list of `KnexMigrationsLock` objects."""
  nodes: [KnexMigrationsLock!]!

  """
  A list of edges which contains the `KnexMigrationsLock` and cursor to aid in pagination.
  """
  edges: [KnexMigrationsLocksEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `KnexMigrationsLock` you could get from the connection.
  """
  totalCount: Int!
}

"""A `KnexMigrationsLock` edge in the connection."""
type KnexMigrationsLocksEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `KnexMigrationsLock` at the end of the edge."""
  node: KnexMigrationsLock!
}

"""Methods to use when ordering `KnexMigrationsLock`."""
enum KnexMigrationsLocksOrderBy {
  NATURAL
  INDEX_ASC
  INDEX_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""Methods to use when ordering `KnexMigration`."""
enum KnexMigrationsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""x,y coords of a cursor"""
type MouseCoordinate implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  x: Float
  y: Float
}

"""
A condition to be used against `MouseCoordinate` object types. All fields are
tested for equality and combined with a logical ‘and.’
"""
input MouseCoordinateCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""An input for mutations affecting `MouseCoordinate`"""
input MouseCoordinateInput {
  rowId: Int
  x: Float
  y: Float
}

"""
Represents an update to a `MouseCoordinate`. Fields that are set will be updated.
"""
input MouseCoordinatePatch {
  rowId: Int
  x: Float
  y: Float
}

"""A connection to a list of `MouseCoordinate` values."""
type MouseCoordinatesConnection {
  """A list of `MouseCoordinate` objects."""
  nodes: [MouseCoordinate!]!

  """
  A list of edges which contains the `MouseCoordinate` and cursor to aid in pagination.
  """
  edges: [MouseCoordinatesEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """
  The count of *all* `MouseCoordinate` you could get from the connection.
  """
  totalCount: Int!
}

"""A `MouseCoordinate` edge in the connection."""
type MouseCoordinatesEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `MouseCoordinate` at the end of the edge."""
  node: MouseCoordinate!
}

"""Methods to use when ordering `MouseCoordinate`."""
enum MouseCoordinatesOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""
The root mutation type which contains root level fields which mutate data.
"""
type Mutation {
  """Creates a single `Comment`."""
  createComment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateCommentInput!
  ): CreateCommentPayload

  """Creates a single `KnexMigration`."""
  createKnexMigration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateKnexMigrationInput!
  ): CreateKnexMigrationPayload

  """Creates a single `KnexMigrationsLock`."""
  createKnexMigrationsLock(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateKnexMigrationsLockInput!
  ): CreateKnexMigrationsLockPayload

  """Creates a single `MouseCoordinate`."""
  createMouseCoordinate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateMouseCoordinateInput!
  ): CreateMouseCoordinatePayload

  """Creates a single `Post`."""
  createPost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreatePostInput!
  ): CreatePostPayload

  """Creates a single `User`."""
  createUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: CreateUserInput!
  ): CreateUserPayload

  """Updates a single `Comment` using its globally unique id and a patch."""
  updateCommentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCommentByIdInput!
  ): UpdateCommentPayload

  """Updates a single `Comment` using a unique key and a patch."""
  updateComment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateCommentInput!
  ): UpdateCommentPayload

  """
  Updates a single `KnexMigration` using its globally unique id and a patch.
  """
  updateKnexMigrationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateKnexMigrationByIdInput!
  ): UpdateKnexMigrationPayload

  """Updates a single `KnexMigration` using a unique key and a patch."""
  updateKnexMigration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateKnexMigrationInput!
  ): UpdateKnexMigrationPayload

  """
  Updates a single `KnexMigrationsLock` using its globally unique id and a patch.
  """
  updateKnexMigrationsLockById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateKnexMigrationsLockByIdInput!
  ): UpdateKnexMigrationsLockPayload

  """Updates a single `KnexMigrationsLock` using a unique key and a patch."""
  updateKnexMigrationsLock(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateKnexMigrationsLockInput!
  ): UpdateKnexMigrationsLockPayload

  """
  Updates a single `MouseCoordinate` using its globally unique id and a patch.
  """
  updateMouseCoordinateById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMouseCoordinateByIdInput!
  ): UpdateMouseCoordinatePayload

  """Updates a single `MouseCoordinate` using a unique key and a patch."""
  updateMouseCoordinate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateMouseCoordinateInput!
  ): UpdateMouseCoordinatePayload

  """Updates a single `Post` using its globally unique id and a patch."""
  updatePostById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePostByIdInput!
  ): UpdatePostPayload

  """Updates a single `Post` using a unique key and a patch."""
  updatePost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdatePostInput!
  ): UpdatePostPayload

  """Updates a single `User` using its globally unique id and a patch."""
  updateUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserByIdInput!
  ): UpdateUserPayload

  """Updates a single `User` using a unique key and a patch."""
  updateUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: UpdateUserInput!
  ): UpdateUserPayload

  """Deletes a single `Comment` using its globally unique id."""
  deleteCommentById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCommentByIdInput!
  ): DeleteCommentPayload

  """Deletes a single `Comment` using a unique key."""
  deleteComment(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteCommentInput!
  ): DeleteCommentPayload

  """Deletes a single `KnexMigration` using its globally unique id."""
  deleteKnexMigrationById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteKnexMigrationByIdInput!
  ): DeleteKnexMigrationPayload

  """Deletes a single `KnexMigration` using a unique key."""
  deleteKnexMigration(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteKnexMigrationInput!
  ): DeleteKnexMigrationPayload

  """Deletes a single `KnexMigrationsLock` using its globally unique id."""
  deleteKnexMigrationsLockById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteKnexMigrationsLockByIdInput!
  ): DeleteKnexMigrationsLockPayload

  """Deletes a single `KnexMigrationsLock` using a unique key."""
  deleteKnexMigrationsLock(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteKnexMigrationsLockInput!
  ): DeleteKnexMigrationsLockPayload

  """Deletes a single `MouseCoordinate` using its globally unique id."""
  deleteMouseCoordinateById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMouseCoordinateByIdInput!
  ): DeleteMouseCoordinatePayload

  """Deletes a single `MouseCoordinate` using a unique key."""
  deleteMouseCoordinate(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteMouseCoordinateInput!
  ): DeleteMouseCoordinatePayload

  """Deletes a single `Post` using its globally unique id."""
  deletePostById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePostByIdInput!
  ): DeletePostPayload

  """Deletes a single `Post` using a unique key."""
  deletePost(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeletePostInput!
  ): DeletePostPayload

  """Deletes a single `User` using its globally unique id."""
  deleteUserById(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserByIdInput!
  ): DeleteUserPayload

  """Deletes a single `User` using a unique key."""
  deleteUser(
    """
    The exclusive input argument for this mutation. An object type, make sure to see documentation for this object’s fields.
    """
    input: DeleteUserInput!
  ): DeleteUserPayload
}

"""An object with a globally unique `ID`."""
interface Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor

  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}

type Post implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  title: String!
  body: String!
  createdAt: Datetime
  updatedAt: Datetime
  userId: Int
}

"""
A condition to be used against `Post` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input PostCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""An input for mutations affecting `Post`"""
input PostInput {
  rowId: Int
  title: String!
  body: String!
  createdAt: Datetime
  updatedAt: Datetime
  userId: Int
}

"""Represents an update to a `Post`. Fields that are set will be updated."""
input PostPatch {
  rowId: Int
  title: String
  body: String
  createdAt: Datetime
  updatedAt: Datetime
  userId: Int
}

"""A connection to a list of `Post` values."""
type PostsConnection {
  """A list of `Post` objects."""
  nodes: [Post!]!

  """
  A list of edges which contains the `Post` and cursor to aid in pagination.
  """
  edges: [PostsEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `Post` you could get from the connection."""
  totalCount: Int!
}

"""A `Post` edge in the connection."""
type PostsEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `Post` at the end of the edge."""
  node: Post!
}

"""Methods to use when ordering `Post`."""
enum PostsOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}

"""The root query type which gives access points into the data universe."""
type Query implements Node {
  """
  Exposes the root query type nested one level down. This is helpful for Relay 1
  which can only query top level fields if they are in a particular form.
  """
  query: Query!

  """
  The root query type must be a `Node` to work well with Relay 1 mutations. This just resolves to `query`.
  """
  id: ID!

  """Fetches an object given its globally unique `ID`."""
  node(
    """The globally unique `ID`."""
    id: ID!
  ): Node

  """Reads and enables pagination through a set of `Comment`."""
  comments(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: CommentCondition
  ): CommentsConnection

  """Reads and enables pagination through a set of `KnexMigration`."""
  knexMigrations(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `KnexMigration`."""
    orderBy: [KnexMigrationsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: KnexMigrationCondition
  ): KnexMigrationsConnection

  """Reads and enables pagination through a set of `KnexMigrationsLock`."""
  knexMigrationsLocks(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `KnexMigrationsLock`."""
    orderBy: [KnexMigrationsLocksOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: KnexMigrationsLockCondition
  ): KnexMigrationsLocksConnection

  """Reads and enables pagination through a set of `MouseCoordinate`."""
  mouseCoordinates(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `MouseCoordinate`."""
    orderBy: [MouseCoordinatesOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: MouseCoordinateCondition
  ): MouseCoordinatesConnection

  """Reads and enables pagination through a set of `Post`."""
  posts(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: PostCondition
  ): PostsConnection

  """Reads and enables pagination through a set of `User`."""
  users(
    """Only read the first `n` values of the set."""
    first: Int

    """Only read the last `n` values of the set."""
    last: Int

    """
    Skip the first `n` values from our `after` cursor, an alternative to cursor
    based pagination. May not be used with `last`.
    """
    offset: Int

    """Read all values in the set before (above) this cursor."""
    before: Cursor

    """Read all values in the set after (below) this cursor."""
    after: Cursor

    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]

    """
    A condition to be used in determining which values should be returned by the collection.
    """
    condition: UserCondition
  ): UsersConnection
  comment(rowId: Int!): Comment
  knexMigration(rowId: Int!): KnexMigration
  knexMigrationsLock(index: Int!): KnexMigrationsLock
  mouseCoordinate(rowId: Int!): MouseCoordinate
  post(rowId: Int!): Post
  user(rowId: Int!): User

  """Reads a single `Comment` using its globally unique `ID`."""
  commentById(
    """The globally unique `ID` to be used in selecting a single `Comment`."""
    id: ID!
  ): Comment

  """Reads a single `KnexMigration` using its globally unique `ID`."""
  knexMigrationById(
    """
    The globally unique `ID` to be used in selecting a single `KnexMigration`.
    """
    id: ID!
  ): KnexMigration

  """Reads a single `KnexMigrationsLock` using its globally unique `ID`."""
  knexMigrationsLockById(
    """
    The globally unique `ID` to be used in selecting a single `KnexMigrationsLock`.
    """
    id: ID!
  ): KnexMigrationsLock

  """Reads a single `MouseCoordinate` using its globally unique `ID`."""
  mouseCoordinateById(
    """
    The globally unique `ID` to be used in selecting a single `MouseCoordinate`.
    """
    id: ID!
  ): MouseCoordinate

  """Reads a single `Post` using its globally unique `ID`."""
  postById(
    """The globally unique `ID` to be used in selecting a single `Post`."""
    id: ID!
  ): Post

  """Reads a single `User` using its globally unique `ID`."""
  userById(
    """The globally unique `ID` to be used in selecting a single `User`."""
    id: ID!
  ): User
}

"""All input for the `updateCommentById` mutation."""
input UpdateCommentByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Comment` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Comment` being updated.
  """
  patch: CommentPatch!
}

"""All input for the `updateComment` mutation."""
input UpdateCommentInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Comment` being updated.
  """
  patch: CommentPatch!
  rowId: Int!
}

"""The output of our update `Comment` mutation."""
type UpdateCommentPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Comment` that was updated by this mutation."""
  comment: Comment

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Comment`. May be used by Relay 1."""
  commentEdge(
    """The method to use when ordering `Comment`."""
    orderBy: [CommentsOrderBy!] = [PRIMARY_KEY_ASC]
  ): CommentsEdge
}

"""All input for the `updateKnexMigrationById` mutation."""
input UpdateKnexMigrationByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `KnexMigration` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `KnexMigration` being updated.
  """
  patch: KnexMigrationPatch!
}

"""All input for the `updateKnexMigration` mutation."""
input UpdateKnexMigrationInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `KnexMigration` being updated.
  """
  patch: KnexMigrationPatch!
  rowId: Int!
}

"""The output of our update `KnexMigration` mutation."""
type UpdateKnexMigrationPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `KnexMigration` that was updated by this mutation."""
  knexMigration: KnexMigration

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `KnexMigration`. May be used by Relay 1."""
  knexMigrationEdge(
    """The method to use when ordering `KnexMigration`."""
    orderBy: [KnexMigrationsOrderBy!] = [PRIMARY_KEY_ASC]
  ): KnexMigrationsEdge
}

"""All input for the `updateKnexMigrationsLockById` mutation."""
input UpdateKnexMigrationsLockByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `KnexMigrationsLock` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `KnexMigrationsLock` being updated.
  """
  patch: KnexMigrationsLockPatch!
}

"""All input for the `updateKnexMigrationsLock` mutation."""
input UpdateKnexMigrationsLockInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `KnexMigrationsLock` being updated.
  """
  patch: KnexMigrationsLockPatch!
  index: Int!
}

"""The output of our update `KnexMigrationsLock` mutation."""
type UpdateKnexMigrationsLockPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `KnexMigrationsLock` that was updated by this mutation."""
  knexMigrationsLock: KnexMigrationsLock

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `KnexMigrationsLock`. May be used by Relay 1."""
  knexMigrationsLockEdge(
    """The method to use when ordering `KnexMigrationsLock`."""
    orderBy: [KnexMigrationsLocksOrderBy!] = [PRIMARY_KEY_ASC]
  ): KnexMigrationsLocksEdge
}

"""All input for the `updateMouseCoordinateById` mutation."""
input UpdateMouseCoordinateByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `MouseCoordinate` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `MouseCoordinate` being updated.
  """
  patch: MouseCoordinatePatch!
}

"""All input for the `updateMouseCoordinate` mutation."""
input UpdateMouseCoordinateInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `MouseCoordinate` being updated.
  """
  patch: MouseCoordinatePatch!
  rowId: Int!
}

"""The output of our update `MouseCoordinate` mutation."""
type UpdateMouseCoordinatePayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `MouseCoordinate` that was updated by this mutation."""
  mouseCoordinate: MouseCoordinate

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `MouseCoordinate`. May be used by Relay 1."""
  mouseCoordinateEdge(
    """The method to use when ordering `MouseCoordinate`."""
    orderBy: [MouseCoordinatesOrderBy!] = [PRIMARY_KEY_ASC]
  ): MouseCoordinatesEdge
}

"""All input for the `updatePostById` mutation."""
input UpdatePostByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `Post` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `Post` being updated.
  """
  patch: PostPatch!
}

"""All input for the `updatePost` mutation."""
input UpdatePostInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `Post` being updated.
  """
  patch: PostPatch!
  rowId: Int!
}

"""The output of our update `Post` mutation."""
type UpdatePostPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `Post` that was updated by this mutation."""
  post: Post

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `Post`. May be used by Relay 1."""
  postEdge(
    """The method to use when ordering `Post`."""
    orderBy: [PostsOrderBy!] = [PRIMARY_KEY_ASC]
  ): PostsEdge
}

"""All input for the `updateUserById` mutation."""
input UpdateUserByIdInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  The globally unique `ID` which will identify a single `User` to be updated.
  """
  id: ID!

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
}

"""All input for the `updateUser` mutation."""
input UpdateUserInput {
  """
  An arbitrary string value with no semantic meaning. Will be included in the
  payload verbatim. May be used to track mutations by the client.
  """
  clientMutationId: String

  """
  An object where the defined keys will be set on the `User` being updated.
  """
  patch: UserPatch!
  rowId: Int!
}

"""The output of our update `User` mutation."""
type UpdateUserPayload {
  """
  The exact same `clientMutationId` that was provided in the mutation input,
  unchanged and unused. May be used by a client to track mutations.
  """
  clientMutationId: String

  """The `User` that was updated by this mutation."""
  user: User

  """
  Our root query field type. Allows us to run any query from our mutation payload.
  """
  query: Query

  """An edge for our `User`. May be used by Relay 1."""
  userEdge(
    """The method to use when ordering `User`."""
    orderBy: [UsersOrderBy!] = [PRIMARY_KEY_ASC]
  ): UsersEdge
}

type User implements Node {
  """
  A globally unique identifier. Can be used in various places throughout the system to identify this single value.
  """
  id: ID!
  rowId: Int!
  name: String!
  email: String!
  password: String!
  accountVerified: Boolean!
  createdAt: Datetime
  updatedAt: Datetime
}

"""
A condition to be used against `User` object types. All fields are tested for equality and combined with a logical ‘and.’
"""
input UserCondition {
  """Checks for equality with the object’s `rowId` field."""
  rowId: Int
}

"""An input for mutations affecting `User`"""
input UserInput {
  rowId: Int
  name: String!
  email: String!
  password: String!
  accountVerified: Boolean
  createdAt: Datetime
  updatedAt: Datetime
}

"""Represents an update to a `User`. Fields that are set will be updated."""
input UserPatch {
  rowId: Int
  name: String
  email: String
  password: String
  accountVerified: Boolean
  createdAt: Datetime
  updatedAt: Datetime
}

"""A connection to a list of `User` values."""
type UsersConnection {
  """A list of `User` objects."""
  nodes: [User!]!

  """
  A list of edges which contains the `User` and cursor to aid in pagination.
  """
  edges: [UsersEdge!]!

  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """The count of *all* `User` you could get from the connection."""
  totalCount: Int!
}

"""A `User` edge in the connection."""
type UsersEdge {
  """A cursor for use in pagination."""
  cursor: Cursor

  """The `User` at the end of the edge."""
  node: User!
}

"""Methods to use when ordering `User`."""
enum UsersOrderBy {
  NATURAL
  ID_ASC
  ID_DESC
  PRIMARY_KEY_ASC
  PRIMARY_KEY_DESC
}
